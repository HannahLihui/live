<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nebula.mooc.webserver.dao.PostDao">
    <resultMap id="PostMap" type="Post">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="userId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="nickName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="kindName" column="KIND_NAME" jdbcType="VARCHAR"/>
        <result property="title" column="TITLE" jdbcType="VARCHAR"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_URL" jdbcType="VARCHAR"/>
        <result property="like" column="LIKE" jdbcType="INTEGER"/>
        <result property="star" column="STAR" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="onePostMap" type="Post">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="userId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="nickName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="kindName" column="KIND_NAME" jdbcType="VARCHAR"/>
        <result property="title" column="TITLE" jdbcType="VARCHAR"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_URL" jdbcType="VARCHAR"/>
        <result property="ifLike" column="IFLIKE" jdbcType="TIMESTAMP"/>
        <result property="like" column="LIKE" jdbcType="INTEGER"/>
        <result property="ifStar" column="IFSTAR" jdbcType="TIMESTAMP"/>
        <result property="star" column="STAR" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="CommentMap" type="Reply">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="fromId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="star" column="STAR" jdbcType="INTEGER"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="fromName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="ifStar" column="IFSTAR" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_URL" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ReplyMap" type="Reply">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="commentId" column="Comment_ID" jdbcType="BIGINT"/>
        <result property="fromId" column="FROM_ID" jdbcType="BIGINT"/>
        <result property="toId" column="TO_ID" jdbcType="BIGINT"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="fromName" column="fname" jdbcType="VARCHAR"/>
        <result property="toName" column="sname" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="newPost" parameterType="Post">
        insert into post (USER_ID, KIND_NAME, TITLE, CONTENT)
        values (#{userId}, #{kindName}, #{title}, #{content})
    </insert>

    <select id="showPost" resultMap="onePostMap" parameterType="Post">
        select t1.ID,
               t1.USER_ID,
               t1.KIND_NAME,
               t1.TITLE,
               t1.CONTENT,
               t1.CREATED_TIME,
               t1.NICKNAME,
               t1.HEAD_URL,
               t1.IFLIKE,
               t1.LIKE,
               post_star.CREATED_TIME
                   IFSTAR,
               t1.STAR
        from (select post.ID,
                     post.USER_ID,
                     post.KIND_NAME,
                     post.TITLE,
                     post.CONTENT,
                     post.CREATED_TIME,
                     user.NICKNAME,
                     user.HEAD_URL,
                     post_like.CREATED_TIME
                         IFLIKE,
                     post.LIKE,
                     post.STAR
              FROM user,
                   post
                       left join post_like on post_like.USER_ID = #{userId} and post_like.POST_ID = post.ID
              WHERE post.ID = #{id}
                and post.USER_ID = user.ID) t1
                 left join post_star on post_star.USER_ID = #{userId} and
                                        post_star.POST_ID = #{id}
    </select>

    <select id="showPostList" resultMap="PostMap" parameterType="Page">
        select
        post.ID,post.USER_ID,post.KIND_NAME,post.TITLE,post.CONTENT,post.CREATED_TIME,post.LIKE,post.STAR,user.NICKNAME,user.HEAD_URL
        FROM post,user
        WHERE post.USER_ID=user.ID
        <if test="kindName != 'TOTAL'">
            and KIND_NAME=#{kindName}
        </if>
        and post.ID &lt;=(select post.ID from post order by post.ID desc limit #{offset},1)
        order by post.ID desc
        limit #{pageSize}
    </select>

    <select id="getLikePost" resultMap="PostMap" parameterType="Page">
        select *
        from (
                 select post.ID,
                        post.USER_ID,
                        post.KIND_NAME,
                        post.TITLE,
                        post.CONTENT,
                        post.CREATED_TIME,
                        post.LIKE,
                        post.STAR,
                        user.NICKNAME,
                        user.HEAD_URL
                 FROM user,
                      post
                          inner join post_like on post_like.USER_ID = #{userId} and post.ID = post_like.POST_ID
                 WHERE post.USER_ID = user.ID
             ) t1
        where t1.ID &lt;= (select t2.ID
                           from (
                                    select post.ID
                                    from post
                                             inner join post_like
                                                        on post_like.USER_ID = #{userId} and post.ID = post_like.POST_ID
                                ) t2
                           order by t2.ID DESC
                           limit #{offset},1)
        order by t1.ID desc
        limit #{pageSize}
    </select>

    <select id="showHotPostList" resultMap="PostMap">
        SELECT post.ID,
               post.USER_ID,
               post.KIND_NAME,
               post.TITLE,
               post.CONTENT,
               post.CREATED_TIME,
               post.LIKE,
               post.STAR,
               user.NICKNAME,
               user.HEAD_URL,
               SUM(SCORE) SUM_SCORE
        FROM post_score
                 INNER JOIN ( post INNER JOIN user ON post.USER_ID = user.ID ) ON post.ID = post_score.POST_ID
        GROUP BY POST_ID
        ORDER BY SUM_SCORE DESC
        LIMIT #{pageSize}
    </select>

    <select id="getComment" resultMap="CommentMap" parameterType="Page">
        select post_comment.ID,
               post_comment.USER_ID,
               post_comment.CONTENT,
               post_comment.STAR,
               post_comment.CREATED_TIME,
               user.NICKNAME,
               user.HEAD_URL,
               post_comment_star.CREATED_TIME IFSTAR
        from user,
             post_comment
                 left join post_comment_star on post_comment_star.USER_ID = #{userId} and
                                                post_comment_star.Comment_ID = post_comment.ID
        where user.ID = post_comment.USER_ID
          and post_comment.POST_ID = #{id}
          and post_comment.ID >= (select post_comment.ID
                                  from post_comment
                                  order by post_comment.ID
                                  limit #{offset},1)
        order by post_comment.ID
        limit #{pageSize}
    </select>

    <select id="getReply" resultMap="ReplyMap" parameterType="Reply">
        select t1.ID,
               t1.COMMENT_ID,
               t1.FROM_ID,
               t1.FROM_ID,
               t1.TO_ID,
               t1.CONTENT,
               t1.CREATED_TIME,
               t1.NICKNAME
                             fname,
               user.NICKNAME sname
        from (select post_comment_reply.ID,
                     post_comment_reply.COMMENT_ID,
                     post_comment_reply.FROM_ID,
                     post_comment_reply.TO_ID,
                     post_comment_reply.CONTENT,
                     post_comment_reply.CREATED_TIME,
                     user.NICKNAME
              from post_comment_reply,
                   user
              where user.ID = post_comment_reply.FROM_ID
                and post_comment_reply.COMMENT_ID = #{id}) t1,
             user
        where t1.TO_ID = user.ID
    </select>

    <insert id="postLike" parameterType="Post">
        insert into post_like(USER_ID, POST_ID)
        values (#{userId}, #{id})
    </insert>

    <update id="addLike" parameterType="Post">
        update post
        set post.LIKE = post.LIKE + 1
        where post.ID = #{id}
    </update>

    <update id="subLike" parameterType="Post">
        update post
        set post.LIKE = post.LIKE - 1
        where ID = #{id}
    </update>

    <delete id="delLike" parameterType="Post">
        delete
        from post_like
        where POST_ID = #{id}
          and USER_ID = #{userId}
    </delete>

    <insert id="comment" parameterType="Reply">
        insert into post_comment(USER_ID, POST_ID, CONTENT)
        values (#{fromId}, #{postId}, #{content})
    </insert>

    <delete id="delComment" parameterType="Reply">
        delete
        from post_comment
        where ID = #{id}
          and USER_ID = #{fromId}
    </delete>

    <insert id="replyComment" parameterType="Reply">
        insert into post_comment_reply(COMMENT_ID, FROM_ID, TO_ID, CONTENT)
        values (#{commentId}, #{fromId}, #{toId}, #{content})
    </insert>

    <delete id="delReplyComment" parameterType="Reply">
        delete
        from post_comment_reply
        where ID = #{id}
          and FROM_ID = #{fromId}
    </delete>

    <select id="ifStar" parameterType="Reply" resultType="java.lang.Integer">
        select ifnull((select 1 from post_comment_star where USER_ID = #{fromId} and COMMENT_ID = #{id} limit 1), 0)
    </select>

    <select id="ifLike" parameterType="Post" resultType="java.lang.Integer">
        select ifnull((select 1 from post_like where USER_ID = #{userId} and POST_ID = #{id} limit 1), 0)
    </select>

    <select id="ifPostStar" parameterType="Post" resultType="java.lang.Integer">
        select ifnull((select 1 from post_star where USER_ID = #{userId} and POST_ID = #{id} limit 1), 0)
    </select>

    <update id="replyStar" parameterType="Reply">
        update post_comment
        set STAR = STAR + 1
        where ID = #{id}
    </update>

    <update id="postStar" parameterType="Post">
        update post
        set STAR=STAR + 1
        where ID = #{id}
    </update>

    <update id="delPostStar" parameterType="Post">
        update post
        set STAR=STAR - 1
        where ID = #{id}
    </update>

    <insert id="markStar" parameterType="Reply">
        insert into post_comment_star(USER_ID, COMMENT_ID)
        values (#{fromId}, #{id})
    </insert>

    <insert id="markPostStar" parameterType="Post">
        insert into post_star(USER_ID, POST_ID)
        values (#{userId}, #{id})
    </insert>

    <update id="delReplyStar" parameterType="Reply">
        update post_comment
        set STAR = STAR - 1
        where ID = #{id}
    </update>

    <delete id="delMarkStar" parameterType="Reply">
        delete
        from post_comment_star
        where USER_ID = #{fromId}
          and COMMENT_ID = #{id}
    </delete>

    <delete id="delMarkPostStar" parameterType="Post">
        delete
        from post_star
        where USER_ID = #{userId}
          and POST_ID = #{id}
    </delete>

    <select id="lastReplyId" resultType="java.lang.Integer">
        SELECT LAST_INSERT_ID();
    </select>

    <select id="postTotal" resultType="java.lang.Integer" parameterType="Page">
        select NUM
        from number
        where TYPE = 1
          and KIND_NAME = #{kindName}
    </select>

    <update id="addTotal">
        update number
        set NUM=NUM + 1
        where TYPE = 1
          and KIND_NAME = #{kindName};
        update number
        set NUM=NUM + 1
        where TYPE = 1
          and KIND_NAME = 'TOTAL'
    </update>

    <update id="subTotal">
        update number
        set NUM=NUM - 1
        where TYPE = 1
          and KIND_NAME = #{kindName};
        update number
        set NUM=NUM - 1
        where TYPE = 1
          and KIND_NAME = 'TOTAL'
    </update>

    <select id="commentTotal" resultType="java.lang.Integer" parameterType="Page">
        select count(*)
        from post_comment
        where POST_ID = #{id}
    </select>

    <select id="likePostTotal" resultType="java.lang.Integer" parameterType="Page">
        select count(*)
        from post
                 inner join post_like on post_like.USER_ID = #{userId} and post_like.POST_ID = post.ID
    </select>


</mapper>